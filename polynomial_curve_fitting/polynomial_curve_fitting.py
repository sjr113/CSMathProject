import numpy as np
import matplotlib.pyplot as plt
import add_Gaussian_noise_on_points
# import generate_point
import draw_curve
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import Ridge


def test_on_polynomial_curve_fitting():

    num_point = 10

    # # 1. generate points which obeys the sin(x) computation
    # func = lambda x: np.sin(x)
    # point_x, point_y = generate_point.generate_point(func, num_point)
    # Because those points generated by this method are too disperse,
    # so I use the next method that using the fixed interval.

    # 1. generate the points with fixed interval
    point_x_10 = np.linspace(0, 6, num_point)
    point_y_10 = np.sin(point_x_10)

    # 2. add noise on the points
    point_x_10 = add_Gaussian_noise_on_points.add_Gaussian_noise_on_points(point_x_10, num_point)
    point_y_10 = add_Gaussian_noise_on_points.add_Gaussian_noise_on_points(point_y_10, num_point)

    # 3. polynomial curve fitting: test on parameter=3
    draw_curve.draw_curve(point_x_10, point_y_10, "M=3", deg=3)

    # 4. polynomial curve fitting: test on parameter=9
    draw_curve.draw_curve(point_x_10, point_y_10, "M=9", deg=9)

    # 5. polynomial curve fitting: test on num_point=15 and degree=9
    num_point = 15
    point_x = np.linspace(0, 6, num_point)
    point_y = np.sin(point_x)

    point_x = add_Gaussian_noise_on_points.add_Gaussian_noise_on_points(point_x, num_point)
    point_y = add_Gaussian_noise_on_points.add_Gaussian_noise_on_points(point_y, num_point)

    draw_curve.draw_curve(point_x, point_y, "M=9", deg=9)

    # 6. polynomial curve fitting: test on num_point=100 and degree=9
    num_point = 100
    point_x = np.linspace(0, 6, num_point)
    point_y = np.sin(point_x)

    point_x = add_Gaussian_noise_on_points.add_Gaussian_noise_on_points(point_x, num_point)
    point_y = add_Gaussian_noise_on_points.add_Gaussian_noise_on_points(point_y, num_point)

    draw_curve.draw_curve(point_x, point_y, "M=9", deg=9)

    # 7. polynomial curve fitting: test on num_point=10 and degree=9 with regularization term

    x = np.linspace(0, 6, 100)
    plt.plot(point_x_10, point_y_10, 'bo')
    plt.xlabel("x")
    plt.ylabel("y")
    text = "ln lambda = -18"
    plt.text(4.5, 0.5, text)
    plt.title("Polynomial Curve Fitting")

    poly_para = make_pipeline(PolynomialFeatures(degree=9), Ridge(alpha=1e-18))
    point_x_10 = np.reshape(point_x_10, (10,1))
    point_y_10 = np.reshape(point_y_10, (10,1))
    poly_para.fit(point_x_10, point_y_10)

    x = np.reshape(x, (100, 1))
    y = poly_para.predict(x)
    plt.plot(x, y, color="r", linewidth=2)
    plt.plot(x, np.sin(x), color="g", linewidth=2)

    plt.show()


if __name__ == "__main__":
    test_on_polynomial_curve_fitting()